# This grammar file is from the Java Language Spec 1.
# Most of this was copied from JLS 1 chapter 19 - LALR(1) Grammar. All
# production rules involving literals were also added.
#
# If a statement has the suffix "?", it is optional.

# TODO(joey): This grammar should be translated to the LALR(1) syntax.
# With the LALR syntax, a provided parser can be used to generate a parser
# DFA.

# The following rules evaluate to lexemes that contain the content of
# specified tokens.

# Tokens are terminal tokens that appear in the production rules.
# Lexeme.sem will be the values listed here.
TOKENS=ExtraTokens:
  abstract
  boolean
  byte
  char
  class
  else
  extends
  false
  final
  for
  if
  implements
  import
  instanceof
  int
  interface
  native
  new
  null
  package
  private
  protected
  public
  return
  short
  static
  super
  this
  true
  void
  while

TOKENS=Separator: one of
  ( ) { } [ ] , .

TOKENS=Operator: one of
  = > < ! ~
  == <= >= != && || | &
  + - * / %

BooleanLiteral:
  true
  false

NullLiteral:
  null

CharacterLiteral:
  LEXEME(CharacterLiteral)

IntegerLiteral:
  LEXEME(NumberLiteral)

StringLiteral:
  LEXEME(StringLiteral)

Identifier:
  LEXEME(Identifier)

# The following rules are production rules. They are all from Ch. 19
# with some rules omittedwhich are not supported by Joos1W

Goal:
  CompilationUnit EOF

Literal:
  IntegerLiteral
  BooleanLiteral
  CharacterLiteral
  StringLiteral
  NullLiteral

Type:
  PrimitiveType
  ReferenceType

PrimitiveType:
  NumericType
  boolean

NumericType:
  IntegralType

IntegralType:
  byte
  short
  int
  char

ReferenceType:
  ClassOrInterfaceType
  ArrayType

ClassOrInterfaceType:
  Name

ClassType:
  ClassOrInterfaceType

InterfaceType:
  ClassOrInterfaceType

ArrayType:
  PrimitiveType [ ]
  Name [ ]
  ArrayType [ ]

Name:
  SimpleName
  QualifiedName

SimpleName:
  Identifier

QualifiedName:
  Name . Identifier

CompilationUnit:
  PackageDeclaration? ImportDeclarations? TypeDeclarations?

ImportDeclarations:
  ImportDeclaration
  ImportDeclarations ImportDeclaration

TypeDeclarations:
  TypeDeclaration
  TypeDeclarations TypeDeclaration

PackageDeclaration:
  package Name ;

ImportDeclaration:
  SingleTypeImportDeclaration
  TypeImportOnDemandDeclaration

SingleTypeImportDeclaration:
  import Name ;

TypeImportOnDemandDeclaration:
  import Name . * ;

TypeDeclaration:
  ClassDeclaration
  InterfaceDeclaration
  ;

Modifiers:
  Modifier
  Modifiers Modifier

Modifier:
  public
  protected
  # Not supported by Joos1W.
  # private
  static
  abstract
  final
  native

ClassDeclaration:
  Modifiers class Identifier Super? Interfaces? ClassBody

Super:
  extends ClassType

Interfaces:
  implements InterfaceTypeList

InterfaceTypeList:
  InterfaceType
  InterfaceTypeList , InterfaceType

ClassBody:
  { ClassBodyDeclarations? }

ClassBodyDeclarations:
  ClassBodyDeclaration
  ClassBodyDeclarations ClassBodyDeclaration

ClassBodyDeclaration:
  ClassMemberDeclaration
  # Not supported in Joos1W
  # StaticInitializer
  ConstructorDeclaration

ClassMemberDeclaration:
  FieldDeclaration
  MethodDeclaration

FieldDeclaration:
  Modifiers Type VariableDeclarator ;

VariableDeclarator:
  VariableDeclaratorId
  VariableDeclaratorId = VariableInitializer

VariableDeclaratorId:
  Identifier
  # Joos1W does not support the array declaration on the identifier.
  # Array declarations must be on the type.
  # VariableDeclaratorId [ ]

VariableInitializer:
  Expression
  # Arrays are not allowed to be initialized. This does mean that we
  # still need to check array declarations for expressions.
  # ArrayInitializer

MethodDeclaration:
  MethodHeader MethodBody

MethodHeader:
  Modifiers Type MethodDeclarator
  Modifiers void MethodDeclarator

MethodDeclarator:
  Identifier ( FormalParameterList? )
  # A legacy code support rule. See 8.4.1 (page 193). It
  # makes methods return an array type. This is explicitly not in
  # Joos1W, "array return type after method signature".
  # MethodDeclarator [ ]

FormalParameterList:
  FormalParameter
  FormalParameterList , FormalParameter

FormalParameter:
  Type VariableDeclaratorId

ClassTypeList:
  ClassType
  ClassTypeList , ClassType

MethodBody:
  Block
  ;

# Not supported by Joos1W
# StaticInitializer:
#   static Block

ConstructorDeclaration:
  Modifiers ConstructorDeclarator ConstructorBody

ConstructorDeclarator:
  SimpleName ( FormalParameterList? )

ConstructorBody:
  { BlockStatements? }

InterfaceDeclaration:
  Modifiers interface Identifier ExtendsInterfaces? InterfaceBody

ExtendsInterfaces:
  extends InterfaceType
  ExtendsInterfaces , InterfaceType

InterfaceBody:
  { InterfaceMemberDeclarations? }

InterfaceMemberDeclarations:
  InterfaceMemberDeclaration
  InterfaceMemberDeclarations InterfaceMemberDeclaration

InterfaceMemberDeclaration:
  # This is not supported in Joos1W.
  # ConstantDeclaration
  AbstractMethodDeclaration

# Unused rule, due to the above omission.
# ConstantDeclaration:
# FieldDeclaration

AbstractMethodDeclaration:
  MethodHeader ;

ArrayInitializer:
  { VariableInitializers? ,? }

VariableInitializers:
  VariableInitializer
  VariableInitializers , VariableInitializer

Block:
  { BlockStatements? }

BlockStatements:
  BlockStatement
  BlockStatements BlockStatement

BlockStatement:
  LocalVariableDeclarationStatement
  Statement

LocalVariableDeclarationStatement:
  LocalVariableDeclaration ;

LocalVariableDeclaration:
  # FIXME(joey): We need to ensure the VariableDeclarator has no
  # assignment.
  Type VariableDeclarator

Statement:
  StatementWithoutTrailingSubstatement
  IfThenStatement
  IfThenElseStatement
  WhileStatement
  ForStatement

StatementNoShortIf:
  StatementWithoutTrailingSubstatement
  IfThenElseStatementNoShortIf
  WhileStatementNoShortIf
  ForStatementNoShortIf

StatementWithoutTrailingSubstatement:
  Block
  EmptyStatement
  ExpressionStatement
  ReturnStatement

EmptyStatement:
  ;

ExpressionStatement:
  StatementExpression ;

StatementExpression:
  Assignment
  MethodInvocation
  ClassInstanceCreationExpression

IfThenStatement:
  if ( Expression ) Statement

IfThenElseStatement:
  if ( Expression ) StatementNoShortIf else Statement

IfThenElseStatementNoShortIf:
  if ( Expression ) StatementNoShortIf else StatementNoShortIf

WhileStatement:
  while ( Expression ) Statement

WhileStatementNoShortIf:
  while ( Expression ) StatementNoShortIf

ForStatement:
  for ( ForInit? ; Expression? ; ForUpdate? ) Statement

ForStatementNoShortIf:
  for ( ForInit? ; Expression? ; ForUpdate? ) StatementNoShortIf

# FIXME(joey): The following two rules (ForInit, ForUpdate) were
# modified to use StatementExpression instead of
# StatementExpressionList. This is because Joos1W does not support
# complex for loops.
ForInit:
  StatementExpression
  LocalVariableDeclaration

ForUpdate:
  StatementExpression

StatementExpressionList:
  StatementExpression
  StatementExpressionList , StatementExpression

ReturnStatement:
  return Expression? ;

Primary:
  PrimaryNoNewArray
  ArrayCreationExpression

PrimaryNoNewArray:
  Literal
  # TODO(joey): we may not need to support this
  this
  ( Expression )
  ClassInstanceCreationExpression
  FieldAccess
  MethodInvocation
  ArrayAccess

ClassInstanceCreationExpression:
  new ClassType ( ArgumentList? )

ArgumentList:
  Expression
  ArgumentList , Expression

ArrayCreationExpression:
  new PrimitiveType DimExprs Dims?
  new ClassOrInterfaceType DimExprs Dims?

DimExprs:
  DimExpr
  DimExprs DimExpr

DimExpr:
  [ Expression ]

Dims:
  [ ]
  Dims [ ]

FieldAccess:
  Primary . Identifier
  super . Identifier

MethodInvocation:
  Name ( ArgumentList? )
  Primary . Identifier ( ArgumentList? )
  super . Identifier ( ArgumentList? )

ArrayAccess:
  Name [ Expression ]
  PrimaryNoNewArray [ Expression ]

PostfixExpression:
  Primary
  Name

UnaryExpression:
  - UnaryExpression
  UnaryExpressionNotPlusMinus

UnaryExpressionNotPlusMinus:
  PostfixExpression
  ~ UnaryExpression
  ! UnaryExpression
  CastExpression

CastExpression:
  ( PrimitiveType Dims? ) UnaryExpression
  ( Expression ) UnaryExpressionNotPlusMinus
  ( Name Dims ) UnaryExpressionNotPlusMinus

MultiplicativeExpression:
  UnaryExpression
  MultiplicativeExpression * UnaryExpression
  MultiplicativeExpression / UnaryExpression
  MultiplicativeExpression % UnaryExpression

AdditiveExpression:
  MultiplicativeExpression
  AdditiveExpression + MultiplicativeExpression
  AdditiveExpression - MultiplicativeExpression

RelationalExpression:
  AdditiveExpression
  RelationalExpression < AdditiveExpression
  RelationalExpression > AdditiveExpression
  RelationalExpression <= AdditiveExpression
  RelationalExpression >= AdditiveExpression
  RelationalExpression instanceof ReferenceType

EqualityExpression:
  RelationalExpression
  EqualityExpression == RelationalExpression
  EqualityExpression != RelationalExpression

AndExpression:
  EqualityExpression
  AndExpression & EqualityExpression

InclusiveOrExpression:
  AndExpression
  InclusiveOrExpression | AndExpression

ConditionalAndExpression:
  InclusiveOrExpression
  ConditionalAndExpression && InclusiveOrExpression

ConditionalOrExpression:
  ConditionalAndExpression
  ConditionalOrExpression || ConditionalAndExpression

AssignmentExpression:
  ConditionalOrExpression
  Assignment

Assignment:
  LeftHandSide AssignmentOperator AssignmentExpression

LeftHandSide:
  Name
  FieldAccess
  ArrayAccess

AssignmentOperator:
  =

Expression:
  AssignmentExpression

ConstantExpression:
  Expression
